<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css"><link rel="stylesheet" href="css/L.Control.Locate.min.css">
        <link rel="stylesheet" href="css/qgis2web.css"><link rel="stylesheet" href="css/fontawesome-all.min.css">
        <link rel="stylesheet" href="css/MarkerCluster.css">
        <link rel="stylesheet" href="css/MarkerCluster.Default.css">
        <style>
        #map {
            width: 100vw;
            height: 86.9vh;
    
        }

.head-parent{
    display:flex;
    align-items:center;
    justify-content:space-between;
    background-color: #0033a0;
    color: white;
    width: 100vw;
    height: 8vh;
    padding: 0 5px;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    
}
.head-child1{
    font-size: 3em;
}

    </style>
        <title> SUDAN IDPs Round3 </title>
    </head>
    <body>
        
        <div class="">

            <div class='head-parent' >
                <h2 class='head-child1'>   Sudan Internally Displaced Persons Round 3 - November 2021 </h2>
                <div class='head-child1'>
                    
                    <img src="images/DTM_Logo.png" style='width:200px;padding: 0 15px 0 0;' >
                </div>
            </div>
                
            <div id="map"></div>

        </div>
            
     
        
        
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script><script src="js/L.Control.Locate.min.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="js/leaflet.wms.js"></script>
        <script src="js/leaflet.markercluster.js"></script>
        <script src="data/sdn_admbnda_adm2_cbs_nic_ssa_20200317_2.js"></script>
        <script src="data/sdn_admbnda_adm1_cbs_nic_ssa_20200317_3.js"></script>
        <script src="data/sdn_admbnda_adm0_cbs_nic_ssa_20200317_4.js"></script>
        <script src="http://localhost:8080/geoserver/web/My_fist_test"></script>
        <script src="data/IDPstest_5.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
        }
        var map = L.map('map', {
            zoomControl:true, maxZoom:28, minZoom:1
        }).fitBounds([[3.5282634626982627,12.723720759470645],[26.00367206039241,49.39829925947274]]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        L.control.locate({locateOptions: {maxZoom: 19}}).addTo(map);
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
            map.setMaxBounds(map.getBounds());
        }
        map.createPane('pane_OSMWMSwolabelsbyterrestris_0');
        map.getPane('pane_OSMWMSwolabelsbyterrestris_0').style.zIndex = 400;
        var layer_OSMWMSwolabelsbyterrestris_0 = L.WMS.layer("http://ows.mundialis.de/services/service", "OSM-WMS-no-labels", {
            pane: 'pane_OSMWMSwolabelsbyterrestris_0',
            format: 'image/png',
            uppercase: true,
            transparent: true,
            continuousWorld : true,
            tiled: true,
            info_format: 'text/html',
            opacity: 1,
            identify: false,
            attribution: '',
        });
        map.addLayer(layer_OSMWMSwolabelsbyterrestris_0);
        map.createPane('pane_OSMi18nWMSbyterrestris_1');
        map.getPane('pane_OSMi18nWMSbyterrestris_1').style.zIndex = 401;
        var layer_OSMi18nWMSbyterrestris_1 = L.WMS.layer("http://ows.mundialis.de/services/service", "OSM-WMS-i18n", {
            pane: 'pane_OSMi18nWMSbyterrestris_1',
            format: 'image/png',
            uppercase: true,
            transparent: true,
            continuousWorld : true,
            tiled: true,
            info_format: 'text/html',
            opacity: 1,
            identify: false,
            attribution: '',
        });
        map.addLayer(layer_OSMi18nWMSbyterrestris_1);
        function pop_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Leng'] !== null ? autolinker.link(feature.properties['Shape_Leng'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Area'] !== null ? autolinker.link(feature.properties['Shape_Area'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2"><strong>ADM2_EN</strong><br />' + (feature.properties['ADM2_EN'] !== null ? autolinker.link(feature.properties['ADM2_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2_AR'] !== null ? autolinker.link(feature.properties['ADM2_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2_PCODE'] !== null ? autolinker.link(feature.properties['ADM2_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2_REF'] !== null ? autolinker.link(feature.properties['ADM2_REF'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2ALT1EN'] !== null ? autolinker.link(feature.properties['ADM2ALT1EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2ALT2EN'] !== null ? autolinker.link(feature.properties['ADM2ALT2EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2ALT1AR'] !== null ? autolinker.link(feature.properties['ADM2ALT1AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM2ALT2AR'] !== null ? autolinker.link(feature.properties['ADM2ALT2AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_EN'] !== null ? autolinker.link(feature.properties['ADM1_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_AR'] !== null ? autolinker.link(feature.properties['ADM1_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_PCODE'] !== null ? autolinker.link(feature.properties['ADM1_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_EN'] !== null ? autolinker.link(feature.properties['ADM0_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_AR'] !== null ? autolinker.link(feature.properties['ADM0_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_PCODE'] !== null ? autolinker.link(feature.properties['ADM0_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['date'] !== null ? autolinker.link(feature.properties['date'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validOn'] !== null ? autolinker.link(feature.properties['validOn'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validTo'] !== null ? autolinker.link(feature.properties['validTo'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2_0() {
            return {
                pane: 'pane_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.5019607843137255)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,255,255,0.4196078431372549)',
                interactive: true,
            }
        }
        map.createPane('pane_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2');
        map.getPane('pane_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2').style.zIndex = 402;
        map.getPane('pane_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2').style['mix-blend-mode'] = 'normal';
        var layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2 = new L.geoJson(json_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2, {
            attribution: '',
            interactive: true,
            dataVar: 'json_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2',
            layerName: 'layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2',
            pane: 'pane_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2',
            onEachFeature: pop_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,
            style: style_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2_0,
        });
        bounds_group.addLayer(layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2);
        map.addLayer(layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2);
        function pop_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Leng'] !== null ? autolinker.link(feature.properties['Shape_Leng'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Area'] !== null ? autolinker.link(feature.properties['Shape_Area'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_EN'] !== null ? autolinker.link(feature.properties['ADM1_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_AR'] !== null ? autolinker.link(feature.properties['ADM1_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_PCODE'] !== null ? autolinker.link(feature.properties['ADM1_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1_REF'] !== null ? autolinker.link(feature.properties['ADM1_REF'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1ALT1EN'] !== null ? autolinker.link(feature.properties['ADM1ALT1EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1ALT2EN'] !== null ? autolinker.link(feature.properties['ADM1ALT2EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1ALT1AR'] !== null ? autolinker.link(feature.properties['ADM1ALT1AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM1ALT2AR'] !== null ? autolinker.link(feature.properties['ADM1ALT2AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_EN'] !== null ? autolinker.link(feature.properties['ADM0_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_AR'] !== null ? autolinker.link(feature.properties['ADM0_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_PCODE'] !== null ? autolinker.link(feature.properties['ADM0_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['date'] !== null ? autolinker.link(feature.properties['date'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validOn'] !== null ? autolinker.link(feature.properties['validOn'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validTo'] !== null ? autolinker.link(feature.properties['validTo'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3_0() {
            return {
                pane: 'pane_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3',
                opacity: 1,
                color: 'rgba(35,35,35,0.5294117647058824)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 2.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(141,90,153,0.0)',
                interactive: false,
            }
        }
        map.createPane('pane_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3');
        map.getPane('pane_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3').style.zIndex = 403;
        map.getPane('pane_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3').style['mix-blend-mode'] = 'normal';
        var layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3 = new L.geoJson(json_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3, {
            attribution: '',
            interactive: false,
            dataVar: 'json_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3',
            layerName: 'layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3',
            pane: 'pane_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3',
            onEachFeature: pop_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3,
            style: style_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3_0,
        });
        bounds_group.addLayer(layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3);
        map.addLayer(layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3);
        function pop_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Leng'] !== null ? autolinker.link(feature.properties['Shape_Leng'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Shape_Area'] !== null ? autolinker.link(feature.properties['Shape_Area'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_EN'] !== null ? autolinker.link(feature.properties['ADM0_EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_AR'] !== null ? autolinker.link(feature.properties['ADM0_AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_PCODE'] !== null ? autolinker.link(feature.properties['ADM0_PCODE'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0_REF'] !== null ? autolinker.link(feature.properties['ADM0_REF'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0ALT1EN'] !== null ? autolinker.link(feature.properties['ADM0ALT1EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0ALT2EN'] !== null ? autolinker.link(feature.properties['ADM0ALT2EN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0ALT1AR'] !== null ? autolinker.link(feature.properties['ADM0ALT1AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ADM0ALT2AR'] !== null ? autolinker.link(feature.properties['ADM0ALT2AR'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['date'] !== null ? autolinker.link(feature.properties['date'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validOn'] !== null ? autolinker.link(feature.properties['validOn'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['validTo'] !== null ? autolinker.link(feature.properties['validTo'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4_0() {
            return {
                pane: 'pane_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(232,113,141,0.0)',
                interactive: false,
            }
        }
        map.createPane('pane_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4');
        map.getPane('pane_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4').style.zIndex = 404;
        map.getPane('pane_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4').style['mix-blend-mode'] = 'normal';
        var layer_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4 = new L.geoJson(json_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4, {
            attribution: '',
            interactive: false,
            dataVar: 'json_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4',
            layerName: 'layer_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4',
            pane: 'pane_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4',
            onEachFeature: pop_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4,
            style: style_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4_0,
        });
        bounds_group.addLayer(layer_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4);
        map.addLayer(layer_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4);
        function pop_IDPstest_5(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                    <tr>\
                        <td colspan="2"><strong>Location_N</strong><br />' + (feature.properties['Location_N'] !== null ? autolinker.link(feature.properties['Location_N'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Y'] !== null ? autolinker.link(feature.properties['Y'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['X'] !== null ? autolinker.link(feature.properties['X'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">R3_HH_IDP</th>\
                        <td>' + (feature.properties['R3_HH_IDP'] !== null ? autolinker.link(feature.properties['R3_HH_IDP'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">R3_Ind_IDP</th>\
                        <td>' + (feature.properties['R3_Ind_IDP'] !== null ? autolinker.link(feature.properties['R3_Ind_IDP'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_IDPstest_5_0(feature) {
            if (feature.properties['R3_Ind_IDP'] >= 5.000000 && feature.properties['R3_Ind_IDP'] <= 10410.000000 ) {
                return {
                pane: 'pane_IDPstest_5',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(31,120,180,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['R3_Ind_IDP'] >= 10410.000000 && feature.properties['R3_Ind_IDP'] <= 45150.000000 ) {
                return {
                pane: 'pane_IDPstest_5',
                radius: 8.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(31,120,180,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['R3_Ind_IDP'] >= 45150.000000 && feature.properties['R3_Ind_IDP'] <= 120835.000000 ) {
                return {
                pane: 'pane_IDPstest_5',
                radius: 12.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(31,120,180,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['R3_Ind_IDP'] >= 120835.000000 && feature.properties['R3_Ind_IDP'] <= 243946.000000 ) {
                return {
                pane: 'pane_IDPstest_5',
                radius: 16.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(31,120,180,1.0)',
                interactive: true,
            }
            }
        }
        map.createPane('pane_IDPstest_5');
        map.getPane('pane_IDPstest_5').style.zIndex = 405;
        map.getPane('pane_IDPstest_5').style['mix-blend-mode'] = 'normal';
        var layer_IDPstest_5 = new L.geoJson(json_IDPstest_5, {
            attribution: '',
            interactive: true,
            dataVar: 'json_IDPstest_5',
            layerName: 'layer_IDPstest_5',
            pane: 'pane_IDPstest_5',
            onEachFeature: pop_IDPstest_5,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_IDPstest_5_0(feature));
            },
        });
        var cluster_IDPstest_5 = new L.MarkerClusterGroup({showCoverageOnHover: false,
            spiderfyDistanceMultiplier: 2});
        cluster_IDPstest_5.addLayer(layer_IDPstest_5);

        bounds_group.addLayer(layer_IDPstest_5);
        cluster_IDPstest_5.addTo(map);
        var baseMaps = {};
        L.control.layers(baseMaps,{'IDPs test<br /><table><tr><td style="text-align: center;"><img src="legend/IDPstest_5_5104100.png" /></td><td>5 - 10410</td></tr><tr><td style="text-align: center;"><img src="legend/IDPstest_5_10410451501.png" /></td><td>10410 - 45150</td></tr><tr><td style="text-align: center;"><img src="legend/IDPstest_5_451501208352.png" /></td><td>45150 - 120835</td></tr><tr><td style="text-align: center;"><img src="legend/IDPstest_5_1208352439463.png" /></td><td>120835 - 243946</td></tr></table>': cluster_IDPstest_5,'<img src="legend/sdn_admbnda_adm0_cbs_nic_ssa_20200317_4.png" /> sdn_admbnda_adm0_cbs_nic_ssa_20200317': layer_sdn_admbnda_adm0_cbs_nic_ssa_20200317_4,'<img src="legend/sdn_admbnda_adm1_cbs_nic_ssa_20200317_3.png" /> sdn_admbnda_adm1_cbs_nic_ssa_20200317': layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3,'<img src="legend/sdn_admbnda_adm2_cbs_nic_ssa_20200317_2.png" /> sdn_admbnda_adm2_cbs_nic_ssa_20200317': layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,"OSM i18n WMS - by terrestris": layer_OSMi18nWMSbyterrestris_1,"OSM WMS w/o labels - by terrestris": layer_OSMWMSwolabelsbyterrestris_0,},{collapsed:false}).addTo(map);
        setBounds();
        var i = 0;
        layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['ADM2_EN'] !== null?String('<div style="color: #323232; font-size: 6pt; font-family: \'Open Sans\', sans-serif;">' + layer.feature.properties['ADM2_EN']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['ADM1_EN'] !== null?String('<div style="color: #1f78b4; font-size: 8pt; font-weight: bold; font-family: \'Open Sans\', sans-serif;">' + layer.feature.properties['ADM1_EN']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        resetLabels([layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3]);
        map.on("zoomend", function(){
            resetLabels([layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3]);
        });
        map.on("layeradd", function(){
            resetLabels([layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3]);
        });
        map.on("layerremove", function(){
            resetLabels([layer_sdn_admbnda_adm2_cbs_nic_ssa_20200317_2,layer_sdn_admbnda_adm1_cbs_nic_ssa_20200317_3]);
        });
        </script>
    </body>
</html>
